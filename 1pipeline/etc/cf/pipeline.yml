AWSTemplateFormatVersion: 2010-09-09
Description: All resources used in the PayGlobal s3 file transfer service
Parameters:
  apiGatewayName:
    Type: String
    Default: pgolDatasetS3ApiGateway
  apiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: news3transfer
  apiGatewayHTTPMethod:
    Type: String
    Default: POST
  lambdaFunctionName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: ValidateConfig
      

Resources:

  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: API Gateway for invoking PgolDatasetS3Lambda
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref apiGatewayName

  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: !Ref apiGatewayHTTPMethod
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt PgolDatasetS3Lambda.Arn
      ResourceId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayRootMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: !Ref apiGatewayStageName

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PgolDatasetS3Lambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/

  PgolDatasetS3Lambda:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          import json
          import boto3
          import base64

          def lambda_handler(event, context):
              print(event)
              
              if "body" in event:
                  if validate_configuration(event['body']):

                      client = boto3.client('stepfunctions')
                      response = client.start_execution(
                          stateMachineArn='arn:aws:states:ap-southeast-2:317382776567:stateMachine:pgol-dataset-s3-stepfunction',
                          input = event['body']
                      )
                      print("response from step func start_execution:")
                      print(response)
                      
                      return {
                          "statusCode": 200,
                          "headers": {
                              "Content-Type": "application/json"
                          },
                          "body": json.dumps({
                              "received_body ": event['body'],
                              "message": "Request received and validated."
                          })
                      }
                  else:
                      print("validation failed, #TODO respond to the caller with error message ")
                      print("body exists")
                      body = event['body']
                      print(body)
              else:
                  print("body was not passing in request")
                  return {
                      "statusCode": 400,
                      "headers": {
                          "Content-Type": "application/json"
                      },
                      "body": json.dumps({
                          "received_body ": '',
                          "message": "Request must contain a request body with a valid configuration"
                      })
                  }
                  
              #print(json.dumps(response))

              
          def validate_configuration(configuration):
              #TODO validate the configuration
              return True
              
      Description: sns validation script for ensuring quality of s3 datafile move service SQS entries
      #FunctionName: left unset to allow for resource replacement via cf during dev
      PackageType: Zip
      Role: !GetAtt PgolDatasetS3LambdaRole.Arn
      Runtime: python3.8
      Tags: 
        - Key: ApplicationName
          Value: pgol-dataset-s3
      Handler: lambda_function.lambda_handler

  PgolDatasetS3LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: StepFunctionExecutionPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: arn:aws:states:*:317382776567:stateMachine:*

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${lambdaFunctionName}
      RetentionInDays: 5

  PgolDatasetS3Sqs:
    Type: AWS::SQS::Queue
    Properties: 
      # QueueName: left unset to allow for resource replacement via cf during dev
      Tags: 
        - Key: ApplicationName
          Value: pgol-dataset-s3

  PgolDatasetS3StepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub |
        {
          "Comment": "Take an add validated s3 file move configuration event from Lambda and track the request through completion",
          "StartAt": "Pass",
          "States": {
            "Pass": {
              "Comment": "A Pass state passes its input to its output, without performing work. Pass states are useful when constructing and debugging state machines.",
              "Type": "Pass",
              "Next": "PushEventToSQS"
            },
            "PushEventToSQS": {
            "Type": "Task",
            "Resource": "arn:aws:states:::sqs:sendMessage",
            "Parameters": {
              "QueueUrl": "${QueueUrl}",
              "MessageBody.$": "$"
            },
            "End": true
            }
          }
        }
      #DefinitionSubstitutions: 
      #  Key : Value
      RoleArn: !GetAtt PgolDatasetS3StepFunctionRole.Arn

  PgolDatasetS3StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - sqs:SendMessage
                Effect: Allow
                Resource: "*"
          PolicyName: PgolDatasetS3StepFunctionPolicy

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}

  lambdaArn:
    Value: !GetAtt PgolDatasetS3Lambda.Arn  
  
  StepFunctionArn:
    Value: !GetAtt PgolDatasetS3StepFunction.Arn

  QueueUrl:
    Value:
      Ref: PgolDatasetS3Sqs