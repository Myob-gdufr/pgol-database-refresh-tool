Transform: AWS::Serverless-2016-10-31
Parameters:
  VpcId: 
    Type: AWS::EC2::VPC::Id
  VpcName:
    Type: String
  VpcSubnetIdsParam:
    Type: List<String>
Description: This template is intended to set up the Lambdas contained in the pgol-dataset-s3-service repository.
Resources:
  DatasetS3PlaceholderLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dataset-s3-placeholder
      CodeUri: ./src/python/lambda_handlers/dataset_s3_placeholder
      Handler: dataset_s3_placeholder.lambda_handler
      Role: !GetAtt DatasetS3PythonLambdaServiceRole.Arn
      AutoPublishAlias: MostRecent
      Timeout: 60
      Runtime: python3.8
      VpcConfig:
        SecurityGroupIds:
            - !Ref PythonLambdasSecurityGroup
        SubnetIds: !Ref VpcSubnetIdsParam
  
  DatasetS3PlaceholderQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      QueueName: !Sub DatasetS3PlaceholderQueue-${VpcName}.fifo
      Tags:
        - Key: VPC
          Value: !Ref VpcName
        - Key: Role
          Value: DatasetS3PlaceholderQueue
  DatasetS3PlaceholderQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Resource: !GetAtt DatasetS3PlaceholderQueue.Arn
            Effect: Allow
            Action: 
              - "SQS:*"
            Principal:
              AWS: 
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
      Queues:
        - !Ref DatasetS3PlaceholderQueue

  

  DatasetS3PlaceholderTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub '${VpcName}-dataset-s3-placeholder-topic'
      TopicName: !Sub '${VpcName}-dataset-s3-placeholder-topic'
      Subscription:
       - Protocol: lambda
         Endpoint: !GetAtt DatasetS3PlaceholderLambda.Arn
      Tags:
        - Key: VPC
          Value: !Ref VpcName
        - Key: Role
          Value: RDSDatabaseRestoredSuccessfully

  DatasetS3PlaceholderLambdaInvokePermission:
   Type: 'AWS::Lambda::Permission'
   Properties:
     Action: 'lambda:InvokeFunction'
     FunctionName: !Ref DatasetS3PlaceholderLambda
     Principal: sns.amazonaws.com   

  DatasetS3PlaceholderTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      Topics:
        - !Ref DatasetS3PlaceholderTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sns:Publish'
            Resource: !Ref DatasetS3PlaceholderTopic
            Principal:
              Service: 'lambda.amazonaws.com'
            Condition:
              ArnEquals:
                AWS:SourceArn: !GetAtt DatasetS3PlaceholderLambda.Arn

  DatasetS3PythonLambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DatasetS3-PythonLambdaServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
      Policies:
        - 
          PolicyName: LogToCloudWatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'
        - 
          PolicyName: NetworkInterfaceAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action: 
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: '*'
        - 
          PolicyName: SNSListTopicsAndTags
          PolicyDocument: 
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action: 
                - sns:ListTopics
                - sns:ListTagsForResource
              Resource: !Sub arn:aws:sns:ap-southeast-2:${AWS::AccountId}:*
        - 
          PolicyName: SNSPublish
          PolicyDocument: 
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action: 
                - sns:Publish
              Resource: !Sub arn:aws:sns:ap-southeast-2:${AWS::AccountId}:${VpcName}-*
        - 
          PolicyName: SQSAccess
          PolicyDocument: 
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action: 
                - sqs:ListQueues
                - sqs:ListQueueTags
                - sqs:SendMessage
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
              Resource: '*'

  PythonLambdasSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DatasetS3_python_lambda_security_group
      GroupDescription: "Security group for Dataset S3 Service Python lambdas"
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - Description: "HTTPS to Anywhere"
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: DatasetS3_python_lambda_security_group
        - Key: Role
          Value: PythonLambdas
        - Key: VPC
          Value: !Ref VpcName